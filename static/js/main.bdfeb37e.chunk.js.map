{"version":3,"sources":["timer.js","randnumapp.js","score.js","serviceWorker.js","index.js"],"names":["Timer","props","starttime","state","count","color","clearInterval","this","timer","setState","setInterval","tick","bind","class","style","onClick","startTimer","stopTimer","resetTimer","React","Component","RandNumApp","nums","numsused","totalnum","number","handleSubmit","handleChange","handlePress","tempnums","i","push","e","target","value","length","randnum","Math","floor","random","newnum","temparray","temparray2","splice","Fragment","map","n","index","htmlFor","id","onChange","Score","team1","team2","handleTeam1","handleTeam2","handleReset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bdfeb37e.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Timer extends React.Component {\n  constructor (props) {\n    super(props)\n    this.starttime = 60\n    this.state = {count: this.starttime, color: \"green\"}\n  }\n  componentWillUnmount () {\n    clearInterval(this.timer)\n  }\n  tick () {\n    if (this.state.count > 0) {\n      this.setState({\n        count: this.state.count - 1,\n          })\n    }\n    \n    if (this.state.count == 10) {\n      this.setState({\n        color: \"orange\"\n          })\n    } else if (this.state.count == 0) {\n      this.setState({\n        color: \"red\"\n          })\n    }\n  }\n  startTimer () {\n    clearInterval(this.timer)\n    this.timer = setInterval(this.tick.bind(this), 1000)\n  }\n  stopTimer () {\n    clearInterval(this.timer)\n  }\n  resetTimer () {\n    clearInterval(this.timer)\n    this.setState({count: this.starttime, color: \"green\"})\n  }\n  render () {\n    return (\n      <div class=\"container\">\n        <h1>Timer:</h1>\n        <h1 style={{color: this.state.color}}>{this.state.count}</h1>\n        <div>\n          <button onClick={this.startTimer.bind(this)}>Start</button>\n          <button onClick={this.stopTimer.bind(this)}>Stop</button>\n          <button onClick={this.resetTimer.bind(this)}>Reset</button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Timer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nclass RandNumApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { nums: [], numsused: [], totalnum: 0, number: 0, color: 'green' };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handlePress = this.handlePress.bind(this);\r\n    }\r\n\r\n    handleSubmit() {\r\n        //e.preventDefault();\r\n        // if (this.state.totalnum == 0) {\r\n        //   return;\r\n        // }\r\n        \r\n        var tempnums = []\r\n        \r\n        for (var i = 1; i <= this.state.totalnum ; i++) {\r\n            var number = i;\r\n            tempnums.push(number);\r\n        }\r\n\r\n        // const newItem = {\r\n        //   text: this.state.totalNum,\r\n        //   id: Date.now()\r\n        // };\r\n        this.setState(state => ({\r\n          nums: tempnums,\r\n          numsused: [],\r\n          color: \"green\",\r\n          totalnum: this.state.totalnum\r\n        }));\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ totalnum: e.target.value });\r\n    }\r\n\r\n    handlePress() {\r\n        if (this.state.nums.length != 0) {\r\n            var randnum = Math.floor(Math.random() * this.state.nums.length);\r\n\r\n            var newnum = this.state.nums[randnum];\r\n\r\n            var temparray = this.state.numsused;\r\n            temparray.push(newnum);\r\n\r\n            var temparray2 = this.state.nums;\r\n            temparray2.splice(randnum,1);\r\n\r\n            this.setState(state => ({ \r\n                number: newnum,\r\n                nums: temparray2,\r\n                numsused: temparray\r\n            }));\r\n        } else {\r\n            this.setState(state => ({ \r\n                number: 0,\r\n                color: \"red\"\r\n            }));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n            <div class=\"container\">\r\n            <h1>Movie Number:</h1>\r\n            <h1 style={{color: this.state.color}}> {this.state.number} </h1>\r\n            <button onClick={this.handlePress}>New Number</button>\r\n            <p>Numbers to be used: {this.state.nums.map((n, index) => (\r\n                <span>{n}, </span>\r\n            ))} </p>\r\n            <p>Numbers already used: {this.state.numsused.map((n, index) => (\r\n                <span>{n}, </span>\r\n            ))} </p>\r\n            \r\n            <label htmlFor=\"new-num\">\r\n                Enter # of Movies\r\n            </label>\r\n            <input\r\n                id=\"new-num\"\r\n                onChange={this.handleChange}\r\n                value={this.state.totalnum}\r\n            />\r\n            <button onClick={this.handleSubmit}>\r\n                Reset Numbers\r\n            </button>\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RandNumApp","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nclass Score extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { team1: 0, team2: 0 };\r\n        this.handleTeam1 = this.handleTeam1.bind(this);\r\n        this.handleTeam2 = this.handleTeam2.bind(this);\r\n        this.handleReset = this.handleReset.bind(this);\r\n    }\r\n\r\n    handleTeam1 () {\r\n        this.setState(state => ({\r\n            team1: state.team1 + 1,\r\n          }));\r\n    }\r\n\r\n    handleTeam2 () {\r\n        this.setState(state => ({\r\n            team2: state.team2 + 1,\r\n          }));\r\n    }\r\n\r\n    handleReset () {\r\n        this.setState(state => ({\r\n            team1: 0,\r\n            team2: 0\r\n          }));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n            <div class=\"container\">\r\n            <h1>Team Scores:</h1>\r\n            <p>Team 1 Score: {this.state.team1}   Team 2 Score: {this.state.team2}</p>\r\n            <button onClick={this.handleTeam1}>\r\n                Team 1 Point\r\n            </button>\r\n            <button onClick={this.handleTeam2}>\r\n                Team 2 Point\r\n            </button>\r\n            <button onClick={this.handleReset}>\r\n                Reset Points\r\n            </button>\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Score","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Timer from './timer'\nimport RandNumApp from './randnumapp'\nimport Score from './score'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Timer />\n    <RandNumApp />\n    <Score />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}